# -*- coding: utf-8 -*-
"""18.modeldeployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ah8v3FeX25oavaxNqmaca9hYYf2MsD_z
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn

df=pd.read_csv('C:/Users/vikas/OneDrive/Desktop/ml data/flask framework/salary_predict_dataset.csv')
print(df)

df.isnull().sum()

df.describe()

# """# filling test_score nan value"""

df['test_score'].fillna(df['test_score'].mean(),inplace=True) # to replace the null value we are taking mean of the data and replacing it with the new mean value.



# """# filling null value in experience with mean value"""

df['experience'].fillna(0,inplace=True)



# here instead of nan value we are changing it as zero

df['interview_score'].fillna(df['interview_score'].mean(),inplace=True)


# """# conversion of string to number in experience column:"""

def stringtoint(word):

  dict={'zero':0,'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'ten':10,"eleven":11,'twelve':12,
        'thirteen':13,'fourteen':14,'fifteen':15,'sixteen':16,'seventeen':17,'eighteen':18,'nineteen':19,'twenty':20,0:0}
  
  return dict[word]  # this line returns the word.

df['experience']=df['experience'].apply(lambda x:stringtoint(x))
print(df)

# in this line we are applying lambda function x and calling the above line function here and applying its value as x.

"""# separation of x and y axis:"""

x=df.iloc[:,:3] # this line takes all the rows and the 3 columns available. [it takes 0 as experience,1 as test_score,2 as interview_score] it takes one num less as by python rule.
y=df.iloc[:,-1] # this line also takes all the rows and fetches the last column than all the columns.

x.head(1)

y.head(1)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.50,random_state=1)

from sklearn.linear_model import LinearRegression
lr=LinearRegression()

lr.fit(xtrain,ytrain)

model=lr.predict(xtrain)
print(model)

lr.predict(xtest)

# """# entering user defined values"""

prednew=lr.predict([[5,6,7]])

print(prednew)

# """# accuracy analysis"""

xpred=lr.predict(xtest)


from sklearn.metrics import mean_squared_error

mse=mean_squared_error(xpred,ytest)

print("the accuracy of the dataset is:",mse)

# """# Now our job is to save our model to create an app:"""

import pickle

pickle.dump(lr,open('model.pkl','wb')) # here we are asking file to be saved as wb